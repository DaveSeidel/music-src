#!/usr/bin/env ruby

#------------------------------------------------------------------------------
# ops
#------------------------------------------------------------------------------

class OpResult
  attr_reader :args, :result

  def initialize(args=nil, result=nil)
    @args = args
    @result = result
  end

  def get
    { :args => @args, :result => @result }
  end
end

# base class for operations
class Op
  def self.name
    ""
  end
  
  def self.get(args)
    OpResult.new.get
  end
  
  def self.usage(err=nil)
    puts "#{name} error: #{err}" if err
  end

  def self.description
    ""
  end

  private
    def self.parse_ratio(txt)
      parsed = {}
      matches = /(\d+)[\/\:](\d+)/.match(txt)
      if matches && matches.captures.length >= 2
        parsed[:nume] = matches[1].to_i
        parsed[:deno] = matches[2].to_i
      end
      parsed
    end
end

# operations

class OpSr < Op
  CLOCK = 72000000.0

  def self.name
    "sr"
  end

  def self.description
    "given args for short to be passed to srate, computes resulting base pitch"
  end

  def self.get(args)
    if args.length < 2
      usage "too few args"
    else
      OpResult.new(args,
        impl(args)
      ).get
    end
  end

  def self.usage(err=nil)
    super err
    puts "#{name} args: bigg smal"
    puts description
  end

  private
    def self.impl(args)
      (CLOCK / ((args[0].to_i * 256) + args[1].to_i)).round(2)
    end
end

class OpRatMul < Op
  def self.name
    "mul"
  end

  def self.description
    "given a ratio in nume/deno form, applies a multiplier to both sides (for scaling)"
  end

  def self.get(args)
    if ARGV.length < 2
      usage "too few args"
    else
      parts = parse_ratio(ARGV[0])
      if parts.empty?
        usage "bad args"
      else
        OpResult.new(args,
          impl(parts, args[1].to_i)
        ).get
      end
    end
  end

  def self.usage(err=nil)
    super err
    puts "#{name} args: nume/deno mul"
    puts description
  end

  private
    def self.impl(parts, mul)
      [parts[:nume] * mul, parts[:deno] * mul]
    end
end

class OpRange < Op
  Min = -128
  Max = 128

  def self.name
    "range"
  end

  def self.description
    "given a mul and an add, computes the resulting range as [low, nominal, high]"
  end

  def self.get(args)
    if args.length < 2
      usage "too few args"
    else
      OpResult.new(args,
        impl(args[0].to_i, args[1].to_i)
      ).get
    end
  end

  def self.usage(err=nil)
    super err
    puts "#{name} args: nume deno"
    puts description
  end

  private
    def self.impl(mul, add)
      lo = ((Min * mul) / Max) + add
      hi = ((Max * mul) / Max) + add
      [lo, add, hi]
    end
end

class OpReduce < Op
  def self.name
    "reduce"
  end

  def self.description
    "given a ratio in nume/deno form, computes the reduced version"
  end

  def self.get(args)
    if args.length < 1
      usage "too few args"
    else
      parts = parse_ratio(ARGV[0])
      if parts.empty?
        usage "bad args"
      else
        OpResult.new(args,
          impl(parts)
        ).get
      end
    end
  end

  def self.usage(err=nil)
    super err
    puts "#{name} args: nume/deno"
    puts description
  end

  private
    def self.impl(parts)
      r = Rational(parts[:nume], parts[:deno])
      [r.numerator, r.denominator]
    end
end

# known operations
Ops = [ OpSr, OpRatMul, OpRange, OpReduce ]

#------------------------------------------------------------------------------
# mainline code
#------------------------------------------------------------------------------

def usage
  puts "usage: 'shtool OP [args ...]'"
  puts "where OP is one of: #{Ops.collect{ |op| op.name}.join(" ") }"
  puts "or try 'shtool help'"
  exit 1
end

def main(argv)
  if argv.length < 1
    usage
  else
    op = argv.shift
    case op
      when "help"
        Ops.each { |op| puts "#{op.name}: #{op.description}" }
      when "sr"
        sr = OpSr.get(argv)
        puts "(srate (short #{sr[:args][0]} #{sr[:args][1]})) = #{sr[:result]}" if sr
      when "mul"
        mul = OpRatMul.get(argv)
        puts "#{mul[:args][0]} * #{mul[:args][1]} -> #{mul[:result][0]}/#{mul[:result][1]}" if mul
      when "range"
        range = OpRange.get(argv)
        puts "#{range[:args][0]} #{range[:args][1]} -> [#{range[:result].join(",")}]" if range
      when "reduce"
        reduce = OpReduce.get(argv)
        puts "#{reduce[:args][0]} -> #{reduce[:result][0]}/#{reduce[:result][1]}" if reduce
      else
        puts "Unrecognized operation #{op}"
        usage
    end
  end
end

main(ARGV)
